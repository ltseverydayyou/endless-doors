local MAX_RETRIES = 5
local PROXIMITY_PROMPT_ATTEMPTS = 15
local ROOM_CHECK_RADIUS = 5

local NotificationModule = nil
local retryCount = 0

while NotificationModule == nil and retryCount < MAX_RETRIES do
    local success, result = pcall(function()
        return loadstring(game:HttpGet("https://raw.githubusercontent.com/ltseverydayyou/Nameless-Admin/main/NamelessAdminNotifications.lua"))()
    end)
    
    if success then
        NotificationModule = result
    else
        retryCount = retryCount + 1
        warn(string.format("Couldn't load notification module (%d/%d), retrying... Error: %s", retryCount, MAX_RETRIES, tostring(result)))
        task.wait(1)
    end
end

if not NotificationModule then
    error("Failed to load notification module after multiple attempts")
end

local function notify(info)
    NotificationModule.Notify(info)
end

local function findValidRoom(currentRoom, radius)
    for i = radius, 2, -1 do
        local roomNumber = currentRoom - i
        if workspace.Game.Rooms:FindFirstChild("Room" .. roomNumber) then
            return roomNumber
        end
    end
    return nil
end

local function findWardrobe(roomNumber)
    local room = workspace.Game.Rooms:FindFirstChild("Room" .. roomNumber)
    if room and room.Models:FindFirstChild("Wardrobe") then
        return room.Models.Wardrobe
    end
    return nil
end

local function teleportToRoomDoor(roomNumber)
    local room = workspace.Game.Rooms:FindFirstChild("Room" .. roomNumber)
    if room and room:FindFirstChild("Door") then
        game:GetService("Players").LocalPlayer.Character:PivotTo(room.Door:GetPivot())
        return true
    end
    return false
end

local function interactWithDoor(door)
    task.spawn(function()
        for _ = 1, PROXIMITY_PROMPT_ATTEMPTS do
            task.wait(0.05)
            local prompt = door.Handle:FindFirstChildOfClass("ProximityPrompt")
            if prompt then
                fireproximityprompt(prompt, 1)
            end
        end
    end)
end

local function hideInWardrobe(wardrobe)
    local args = {wardrobe, false, false}
    game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("HIDE"):FireServer(unpack(args))
end

local function executeExploit()
    local player = game:GetService("Players").LocalPlayer
    local currentRoom = workspace.Game.Values.RoomsNumber.Value
    
    local previousRoom = findValidRoom(currentRoom, ROOM_CHECK_RADIUS)
    if not previousRoom then
        notify({Description = "Open a few more doors for this to work", Title = "Room Check Failed", Duration = 3})
        return false
    end
    
    local wardrobe = findWardrobe(previousRoom)
    if not wardrobe then
        notify({Description = "No wardrobe found, open a few more doors", Title = "Wardrobe Check Failed", Duration = 5})
        return false
    end
    
    if not teleportToRoomDoor(currentRoom) then
        notify({Description = "Failed to teleport to current room door", Title = "Teleport Failed", Duration = 3})
        return false
    end
    
    local currentDoor = workspace.Game.Rooms["Room" .. currentRoom].Door
    interactWithDoor(currentDoor)
    
    task.wait(0.5)
    
    hideInWardrobe(wardrobe)
    
    task.wait(1)
    
    task.spawn(function()
        repeat task.wait() until player.Character:FindFirstChild("Hiding") and player.Character.Hiding.Value == true
        
        notify({Description = "Successfully hidden! Maintaining position...", Title = "Exploit Active", Duration = 3})
        
        repeat 
            task.wait(0.1)
            teleportToRoomDoor(currentRoom)
        until not player.Character:FindFirstChild("Hiding") or player.Character.Hiding.Value == false
    end)
    
    task.wait(3.5)
    if player.Character:FindFirstChild("Hiding") then
        player.Character.Hiding.Value = false
        notify({Description = "Exploit completed successfully", Title = "Success", Duration = 3})
    end
    
    return true
end

executeExploit()